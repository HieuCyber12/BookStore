package com.bookstore.model;
// Generated Oct 10, 2023, 5:06:29 PM by Hibernate Tools 4.3.6.Final

import java.util.Base64;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "Users", schema = "dbo", catalog = "bookstore", uniqueConstraints = {
		@UniqueConstraint(columnNames = "telephone"), @UniqueConstraint(columnNames = "email"),
		@UniqueConstraint(columnNames = "username") })

@NamedQueries({ @NamedQuery(name = "Users.findAll", query = "SELECT u FROM Users u ORDER BY u.userId"),
		@NamedQuery(name = "Users.findByEmail", query = "SELECT u FROM Users u WHERE u.email = :email"),
		@NamedQuery(name = "Users.findByGoogleId", query = "SELECT u FROM Users u WHERE u.googleId = :googleId"),
		@NamedQuery(name = "Users.findByTelephone", query = "SELECT u FROM Users u WHERE u.telephone = :telephone"),
		@NamedQuery(name = "Users.checkLogin", query = "SELECT u FROM Users u WHERE u.email = :email AND u.password = :password"),
		@NamedQuery(name = "Users.countAll", query = "SELECT COUNT(u) FROM Users u") })
public class Users implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private Integer userId;
	private String googleId;
	private String username;
	private String password;
	private String firstName;
	private String lastName;
	private String email;
	private byte[] avatar;
	private String base64Image;
	private String telephone;
	private Date createdAt;
	private Date modifiedAt;
	private Boolean isBanned;
	private Set<Orders> orderses = new HashSet<Orders>(0);
	private Set<Reviews> reviewses = new HashSet<Reviews>(0);
	private Set<UserRoles> userRoleses = new HashSet<UserRoles>(0);
	private Set<ShoppingCart> shoppingCarts = new HashSet<ShoppingCart>(0);
	private Set<UserAddress> userAddresses = new HashSet<UserAddress>(0);

	public Users() {
	}

	public Users(Integer userId, String username, String password, String firstName, String lastName, String email,
			String telephone) {
		this.userId = userId;
		this.username = username;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.telephone = telephone;
	}

	public Users(String username, String password, String firstName, String lastName, String email, String telephone) {
		this.username = username;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.telephone = telephone;
	}

	public Users(String username, String password, String firstName, String lastName, String email, String telephone,
			Date createdAt, Date modifiedAt) {
		this.username = username;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.telephone = telephone;
		this.createdAt = createdAt;
		this.modifiedAt = modifiedAt;
	}

	public Users(String username, String password, String firstName, String lastName, String email, byte[] avatar,
			String telephone, Date createdAt, Date modifiedAt, Boolean isBanned, Set<Orders> orderses,
			Set<Reviews> reviewses, Set<UserRoles> userRoleses, Set<ShoppingCart> shoppingCarts,
			Set<UserAddress> userAddresses) {
		this.username = username;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.avatar = avatar;
		this.telephone = telephone;
		this.createdAt = createdAt;
		this.modifiedAt = modifiedAt;
		this.isBanned = isBanned;
		this.orderses = orderses;
		this.reviewses = reviewses;
		this.userRoleses = userRoleses;
		this.shoppingCarts = shoppingCarts;
		this.userAddresses = userAddresses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@Column(name = "google_id")
	public String getGoogleId() {
		return this.googleId;
	}

	public void setGoogleId(String googleId) {
		this.googleId = googleId;
	}
	
	@Column(name = "username", unique = true, nullable = false)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "first_name", nullable = false)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", nullable = false)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "email", unique = true, nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "avatar")
	public byte[] getAvatar() {
		return this.avatar;
	}

	public void setAvatar(byte[] avatar) {
		this.avatar = avatar;
	}

	@Column(name = "telephone", unique = true, nullable = false)
	public String getTelephone() {
		return this.telephone;
	}

	public void setTelephone(String telephone) {
		this.telephone = telephone;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", nullable = false, length = 23)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified_at", nullable = false, length = 23)
	public Date getModifiedAt() {
		return this.modifiedAt;
	}

	public void setModifiedAt(Date modifiedAt) {
		this.modifiedAt = modifiedAt;
	}

	@Column(name = "is_banned")
	public Boolean getIsBanned() {
		return this.isBanned;
	}

	public void setIsBanned(Boolean isBanned) {
		this.isBanned = isBanned;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Orders> getOrderses() {
		return this.orderses;
	}

	public void setOrderses(Set<Orders> orderses) {
		this.orderses = orderses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Reviews> getReviewses() {
		return this.reviewses;
	}

	public void setReviewses(Set<Reviews> reviewses) {
		this.reviewses = reviewses;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "users")
	public Set<UserRoles> getUserRoleses() {
		return this.userRoleses;
	}

	public void setUserRoleses(Set<UserRoles> userRoleses) {
		this.userRoleses = userRoleses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<ShoppingCart> getShoppingCarts() {
		return this.shoppingCarts;
	}

	public void setShoppingCarts(Set<ShoppingCart> shoppingCarts) {
		this.shoppingCarts = shoppingCarts;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "users")
	public Set<UserAddress> getUserAddresses() {
		return this.userAddresses;
	}

	public void setUserAddresses(Set<UserAddress> userAddresses) {
		this.userAddresses = userAddresses;
	}

	@Transient
	public String getBase64Image() {
		this.base64Image = Base64.getEncoder().encodeToString(this.avatar);
		return this.base64Image;
	}
	
	@Transient
	public void setBase64Image(String base64Image) {
		this.base64Image = base64Image;
	}
	
	@Transient
	public String getUserFullName() {
		
		return String.format("%s %s", this.getFirstName(),this.getLastName());
	}
}
