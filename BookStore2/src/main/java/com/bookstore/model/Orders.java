package com.bookstore.model;
// Generated Oct 31, 2023, 4:15:31 PM by Hibernate Tools 4.3.6.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

/**
 * Orders generated by hbm2java
 */
@Entity
@Table(name = "Orders", schema = "dbo", catalog = "bookstore")
@NamedQueries({
	@NamedQuery(name = "Orders.findAll", query = "SELECT o FROM Orders o ORDER BY o.orderDate DESC"),
	@NamedQuery(name = "Orders.countAll", query = "SELECT COUNT(*) FROM Orders"),
	@NamedQuery(name = "Orders.getOrderToast", query = "SELECT o FROM Orders o ORDER BY o.orderId DESC"),
	@NamedQuery(name = "Orders.findByCustomer", 
	     query = "SELECT o FROM Orders o WHERE o.users.userId = :customerId ORDER BY o.orderDate DESC"),
	@NamedQuery(name = "Orders.findByIdAndCustomer", 
    query = "SELECT o FROM Orders o WHERE o.users.userId = :customerId AND o.orderId = :orderId")	
})
public class Orders implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer orderId;
	private Shipping shipping;
	private Users users;
	private Date orderDate;
	private String orderStatus;
	private float totalAmount;
	private String paymentMethod;
	private Set<OrderDetails> orderDetailses = new HashSet<OrderDetails>(0);

	public Orders() {
	}

	public Orders(Shipping shipping, Users users, Date orderDate, String orderStatus, float totalAmount) {
		this.shipping = shipping;
		this.users = users;
		this.orderDate = orderDate;
		this.orderStatus = orderStatus;
		this.totalAmount = totalAmount;
	}

	public Orders(Shipping shipping, Users users, Date orderDate, String orderStatus, float totalAmount,
			Set<OrderDetails> orderDetailses) {
		this.shipping = shipping;
		this.users = users;
		this.orderDate = orderDate;
		this.orderStatus = orderStatus;
		this.totalAmount = totalAmount;
		this.orderDetailses = orderDetailses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "order_id", unique = true, nullable = false)
	public Integer getOrderId() {
		return this.orderId;
	}

	public void setOrderId(Integer orderId) {
		this.orderId = orderId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "shipping_id", nullable = false)
	public Shipping getShipping() {
		return this.shipping;
	}

	public void setShipping(Shipping shipping) {
		this.shipping = shipping;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "user_id", nullable = false)
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "order_date", nullable = false, length = 23)
	public Date getOrderDate() {
		return this.orderDate;
	}

	public void setOrderDate(Date orderDate) {
		this.orderDate = orderDate;
	}

	@Column(name = "order_status", nullable = false)
	public String getOrderStatus() {
		return this.orderStatus;
	}

	public void setOrderStatus(String orderStatus) {
		this.orderStatus = orderStatus;
	}

	@Column(name = "total_amount", nullable = false)
	public float getTotalAmount() {
		return this.totalAmount;
	}

	public void setTotalAmount(float totalAmount) {
		this.totalAmount = totalAmount;
	}

	@Column(name = "payment_method")
	public String getPaymentMethod() {
		return this.paymentMethod;
	}

	public void setPaymentMethod(String paymentMethod) {
		this.paymentMethod = paymentMethod;
	}
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "orders")
	public Set<OrderDetails> getOrderDetailses() {
		return this.orderDetailses;
	}

	public void setOrderDetailses(Set<OrderDetails> orderDetailses) {
		this.orderDetailses = orderDetailses;
	}

}