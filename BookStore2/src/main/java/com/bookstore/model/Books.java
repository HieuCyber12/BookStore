package com.bookstore.model;
// Generated Oct 10, 2023, 5:06:29 PM by Hibernate Tools 4.3.6.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * Books generated by hbm2java
 */
@Entity
@Table(name = "Books", schema = "dbo", catalog = "bookstore")
@NamedQueries({ @NamedQuery(name = "Books.findAll", query = "SELECT b FROM Books b ORDER BY b.bookId"),
		@NamedQuery(name = "Books.findBestSellingBooks", query = "SELECT b FROM Books b "
				+ "JOIN OrderDetails od ON b.bookId = od.books.bookId "
				+ "GROUP BY b.bookId, b.author, b.title, b.description, b.bookSlug, b.isbn, "
				+ "b.price, b.publishDate, b.modifiedAt, b.categories.categoryId, b.createdAt "
				+ "ORDER BY SUM(od.quantity) DESC"),
		@NamedQuery(name = "Books.findByIsbn", query = "SELECT b FROM Books b WHERE b.isbn = :isbn"),
		@NamedQuery(name = "Books.findByTitle", query = "SELECT b FROM Books b WHERE b.title = :title"),
		@NamedQuery(name = "Books.findBySlug", query = "SELECT b FROM Books b WHERE b.bookSlug = :bookSlug"),
		@NamedQuery(name = "Books.findByCategory", query = "SELECT b FROM Books b JOIN "
				+ "Categories c ON b.categories.categoryId = c.categoryId AND c.categoryId = :categoryId"),
		@NamedQuery(name = "Books.listNew", query = "SELECT b FROM Books b ORDER BY b.createdAt DESC"),
		@NamedQuery(name = "Books.search", query = "SELECT b FROM Books b WHERE b.title LIKE '%' || :keyword || '%'"
				+ " OR b.author LIKE '%' || :keyword || '%'" + " OR b.description LIKE '%' || :keyword || '%'"),
		@NamedQuery(name = "Books.countAll", query = "SELECT COUNT(b) FROM Books b") })
public class Books implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer bookId;
	private Categories categories;
	private String title;
	private String author;
	private String description;
	private String bookSlug;
	private String isbn;
	private float price;
	private Date publishDate;
	private Date modifiedAt;
	private Date createdAt;
	private Set<BookImages> bookImageses = new HashSet<BookImages>(0);
	private Set<OrderDetails> orderDetailses = new HashSet<OrderDetails>(0);
	private Set<Discounts> discountses = new HashSet<Discounts>(0);
	private Set<ShoppingCart> shoppingCarts = new HashSet<ShoppingCart>(0);
	private Set<Warehouse> warehouses = new HashSet<Warehouse>(0);
	private Set<Reviews> reviewses = new HashSet<Reviews>(0);

	public Books() {
	}

	public Books(Integer bookId, String title, String author, String description, String isbn, float price) {
		this.bookId = bookId;
		this.title = title;
		this.author = author;
		this.description = description;
		this.isbn = isbn;
		this.price = price;

	}

	public Books(String title, String author, String description, String bookSlug, String isbn, float price) {
		this.title = title;
		this.author = author;
		this.description = description;
		this.bookSlug = bookSlug;
		this.isbn = isbn;
		this.price = price;

	}

	public Books(String title, String author, String bookSlug, String isbn, float price, Date publishDate) {
		this.title = title;
		this.author = author;
		this.bookSlug = bookSlug;
		this.isbn = isbn;
		this.price = price;
		this.publishDate = publishDate;
	}

	public Books(Categories categories, String title, String author, String description, String bookSlug, String isbn,
			float price, Date publishDate, Set<BookImages> bookImageses, Set<OrderDetails> orderDetailses,
			Set<Discounts> discountses, Set<ShoppingCart> shoppingCarts, Set<Reviews> reviewses) {
		this.categories = categories;
		this.title = title;
		this.author = author;
		this.description = description;
		this.bookSlug = bookSlug;
		this.isbn = isbn;
		this.price = price;
		this.publishDate = publishDate;
		this.bookImageses = bookImageses;
		this.orderDetailses = orderDetailses;
		this.discountses = discountses;
		this.shoppingCarts = shoppingCarts;
		this.reviewses = reviewses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "book_id", unique = true, nullable = false)
	public Integer getBookId() {
		return this.bookId;
	}

	public void setBookId(Integer bookId) {
		this.bookId = bookId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "category_id")
	public Categories getCategories() {
		return this.categories;
	}

	public void setCategories(Categories categories) {
		this.categories = categories;
	}

	@Column(name = "title", nullable = false)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "author", nullable = false)
	public String getAuthor() {
		return this.author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "slug", nullable = false)
	public String getBookSlug() {
		return this.bookSlug;
	}

	public void setBookSlug(String bookSlug) {
		this.bookSlug = bookSlug;
	}

	@Column(name = "isbn", nullable = false)
	public String getIsbn() {
		return this.isbn;
	}

	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}

	@Column(name = "price", nullable = false, precision = 10)
	public float getPrice() {
		return this.price;
	}

	public void setPrice(float price) {
		this.price = price;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "publish_date", nullable = false, length = 10)
	public Date getPublishDate() {
		return this.publishDate;
	}

	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified_at", length = 23)
	public Date getModifiedAt() {
		return this.modifiedAt;
	}

	public void setModifiedAt(Date modifiedAt) {
		this.modifiedAt = modifiedAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", length = 23)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "books")
	public Set<BookImages> getBookImageses() {
		return this.bookImageses;
	}

	public void setBookImageses(Set<BookImages> bookImageses) {
		this.bookImageses = bookImageses;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "books")
	public Set<OrderDetails> getOrderDetailses() {
		return this.orderDetailses;
	}

	public void setOrderDetailses(Set<OrderDetails> orderDetailses) {
		this.orderDetailses = orderDetailses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "books")
	public Set<Discounts> getDiscountses() {
		return this.discountses;
	}

	public void setDiscountses(Set<Discounts> discountses) {
		this.discountses = discountses;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "books")
	public Set<ShoppingCart> getShoppingCarts() {
		return this.shoppingCarts;
	}

	public void setShoppingCarts(Set<ShoppingCart> shoppingCarts) {
		this.shoppingCarts = shoppingCarts;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "books")
	public Set<Warehouse> getWarehouses() {
		return this.warehouses;
	}

	public void setWarehouses(Set<Warehouse> warehouses) {
		this.warehouses = warehouses;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "books")
	public Set<Reviews> getReviewses() {
		return this.reviewses;
	}

	public void setReviewses(Set<Reviews> reviewses) {
		this.reviewses = reviewses;
	}

	@Transient
	public float getAverageRating() {
		float averageRating = 0.0f;
		float sum = 0.0f;

		if (reviewses.isEmpty()) {
			return 0.0f;
		}

		for (Reviews review : reviewses) {
			sum += review.getRating();
		}

		averageRating = sum / reviewses.size();

		return averageRating;
	}

	@Transient
	public String getRatingString(float averageRating) {
		String result = "";

		int numberOfStarsOn = (int) averageRating;

		for (int i = 1; i <= numberOfStarsOn; i++) {
			result += "on,";
		}

		int next = numberOfStarsOn + 1;

		if (averageRating > numberOfStarsOn) {
			result += "half,";
			next++;
		}

		for (int j = next; j <= 5; j++) {
			result += "off,";
		}

		return result.substring(0, result.length() - 1);
	}

	@Transient
	public String getRatingStars() {
		float averageRating = getAverageRating();

		return getRatingString(averageRating);
	}
}
